@using System.ComponentModel
@using AntDesign.TableModels

<Table @ref="table"
       TItem="VerifiedSkills"
       DataSource="@forecasts"
       Total="_total"
       @bind-PageIndex="_pageIndex"
       @bind-PageSize="_pageSize"
       @bind-SelectedRows="selectedRows"
       OnChange="OnChange"
       Size="TableSize.Small"
       RowKey="x=>x.Id">
    <Selection Key="@(context.Id.ToString())" />
    <PropertyColumn Title="Skill" Property="c=>c.skill" Width="150" Align="@columnAlign" />
    <PropertyColumn Title="Level" Property="c=>c.level" Width="350" Align="@columnAlign">
        <RadioGroup @bind-Value="@context.level">
            <Radio Value="1">Novice</Radio>
            <Radio Value="2">Proficient</Radio>
            <Radio Value="3">Expert</Radio>
        </RadioGroup>
    </PropertyColumn>
    <PropertyColumn Title="YOE" Property="c=>c.yoe" Align="@columnAlign">
        <Input   Type="number" Placeholder="0" @bind-Value="@context.yoe" />
     </PropertyColumn>
    <PropertyColumn Title="Hourly Wage" Property="c=>c.wage" Align="@columnAlign">
        <Input Type="number" Placeholder="0" @bind-Value="@context.wage" />
    </PropertyColumn>
</Table>


@if (selectedRows != null && selectedRows.Any())
{
    <Button Danger Size="small" OnClick="@(e => { selectedRows = null; })">Clear</Button>

    @foreach (var selected in selectedRows)
    {
        <Tag @key="selected.Id" Closable OnClose="e=>RemoveSelection(selected.Id)">@selected.Id - @selected.Summary</Tag>
    }
}



@using System.Text.Json;
@code {

    ColumnAlign columnAlign = ColumnAlign.Left;


    List<VerifiedSkills> forecasts =new List<VerifiedSkills>();

    IEnumerable<VerifiedSkills> selectedRows;
    ITable table;

    int _pageIndex = 1;
    int _pageSize = 10;
    int _total = 0;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await GetForecastAsync(1, 50);
        _total = 50;
    }

    public class VerifiedSkills
    {
        public int Id { get; set; }

        [DisplayName("Date")]
        public DateTime? Date { get; set; }

        [DisplayName("Temp. (C)")]
        public int TemperatureC { get; set; }

        [DisplayName("Summary")]
        public string Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);

        public bool Hot { get; set; }

        /// <summary>
        /// 
        /// </summary>

        public  string  skill  { get; set; }

        /// <summary>
        ///
        /// </summary>
        public int level { get; set; } = 1;


        /// <summary>
        ///
        /// </summary>
        public int yoe { get; set; }


        /// <summary>
        /// 
        /// </summary>
        public  double  wage { get; set; }

    }

    private static readonly string[] Summaries = new[]
    {
        "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
  };

    public async Task OnChange(QueryModel<VerifiedSkills> queryModel)
    {
        Console.WriteLine(JsonSerializer.Serialize(queryModel));
    }

    public Task<List<VerifiedSkills>> GetForecastAsync(int pageIndex, int pageSize)
    {
        var rng = new Random();
        return Task.FromResult(Enumerable.Range((pageIndex - 1) * pageSize + 1, pageSize).Select(index =>
        {
            var temperatureC = rng.Next(-20, 55);
            return new VerifiedSkills
                {
                    Id = index,
                    skill="Temp",

                };
        }).ToList());
    }

    public void RemoveSelection(int id)
    {
        var selected = selectedRows.Where(x => x.Id != id);
        selectedRows = selected;
    }

    
}
